Index: Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\r\n\r\npublic class Main {\r\n    public static HashMap<String, HashMap<String, String[]>> Year = new HashMap<String, HashMap<String, String[]>>();\r\n    public static Scanner input = new Scanner(System.in);\r\n\r\n    /**\r\n     * @param newYear the new year to be added, should be 4-digit positive integer\r\n     * @author Robert Engel, T03\r\n     * This function adds a new HashMap representing a new year to be added, it will NOT add a new value if the\r\n     * year already exists (i.e. the key already exists)\r\n     */\r\n    public static void addYear(int newYear) {\r\n        if (Year.containsKey(Integer.toString(newYear)) == true) {\r\n            System.out.println(\"Year already Exists! Year Not Added\");\r\n        } else {\r\n            HashMap<String, String[]> addYear = new HashMap<String, String[]>();\r\n            Year.put(Integer.toString(newYear), addYear);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param checkYear the year being added to, the function will do nothing if the given year is not a key\r\n     *                  within the Year HashMap\r\n     * @param gameData  the Data being added to the game, should be a String[] of length 10, with special values\r\n     *                  for each String, showing, in order\r\n     *                  Home Team\r\n     *                  Away Team\r\n     *                  Home Team Fouls\r\n     *                  Away Team Fouls\r\n     *                  Home Team Shots\r\n     *                  Away Team Shots\r\n     *                  Home Team Goals\r\n     *                  Away Team Goals\r\n     *                  Winner\r\n     *                  Date\r\n     * @author Robert Engel, T03, Feb 21 2022\r\n     * This function adds a new game to a specific Year HashMap, along with the data for the game\r\n     */\r\n    public static void addGame(int checkYear, String[] gameData) {\r\n        if (Year.containsKey(Integer.toString(checkYear)) == true) {\r\n            String gameKey = gameData[1] + \" vs. \" + gameData[2] + \" on \" + gameData[9];\r\n            Year.get(Integer.toString(checkYear)).put(gameKey, gameData);\r\n\r\n        } else {\r\n            System.out.println(\"Specified Year does not Exist!\");\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @param checkYear the year within the game which is being retrieved, should be a 4-digit positive int\r\n     * @param checkGame the game name which is being retrieved, should be along the lines of \"Home vs. Away on Date\"\r\n     * @return A String of Game Data, see addGame for the specifics\r\n     * @author Robert Engel, T03, Feb 21 2022\r\n     * This function returns the data of a specific game as a String, for easier access\r\n     */\r\n    public static String[] getGameData(int checkYear, String checkGame) {\r\n        if (Year.containsKey(Integer.toString(checkYear)) == true) {\r\n            if (Year.get(Integer.toString(checkYear)).containsKey(checkGame) == true) {\r\n                return Year.get(Integer.toString(checkYear)).get(checkGame);\r\n            }\r\n        }\r\n        System.out.println(\"Failed retrieval, game or year does not exist!\");\r\n        return null;\r\n    }\r\n\r\n    public static String findGame() {\r\n        int choice = 0;\r\n        String sChoice = \"\";\r\n        System.out.println(\"Teams have their first letter capitalized, no periods for abbreviations\");\r\n        while (sChoice.isEmpty() == true) {\r\n            try {\r\n                System.out.print(\"Please Input the Home Team:\");\r\n                sChoice = input.next();\r\n                if (sChoice.isEmpty() == true) {\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        String homeTeam = sChoice;\r\n        sChoice = \"\";\r\n        while (sChoice.isEmpty() == true) {\r\n            try {\r\n                System.out.print(\"Please Input the Away Team:\");\r\n                sChoice = input.next();\r\n                if (sChoice.isEmpty() == true) {\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        String awayTeam = sChoice;\r\n        sChoice = \"\";\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input the year the game was played:\");\r\n                choice = input.nextInt();\r\n                if (choice < 1000 || choice > 9999) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        int gameYear = choice;\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input the month the game was played, as a number (1 = January, 2 = February, etc.:\");\r\n                choice = input.nextInt();\r\n                if (choice < 1 || choice > 12) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        int gameMonth = choice;\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input the day the game was played:\");\r\n                choice = input.nextInt();\r\n                if (choice < 1 || choice > 31) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        int gameDay = choice;\r\n        String Date = gameYear + \"-\" + gameMonth + \"-\" + gameDay;\r\n        String foundGame = homeTeam + \" vs. \" + awayTeam + \" on \" + Date;\r\n        return foundGame;\r\n    }\r\n\r\n    /**\r\n     * @author Robert Engel, T03, Feb 21 2022\r\n     * The main part of the menu system, breaking it up for simplicity of finding specific parts of the menu.\r\n     */\r\n    public static void mainMenu() {\r\n        int choice = 0;\r\n        System.out.println(\"Welcome to the Premier League Database Main Menu!\\nPlease Input a number to choose your action\");\r\n        System.out.println(\"1. Add a new Year\\n2. Add a new Game to a Year\\n3. General Output Menu\\n4. Special Output Menu\\n5. Quit the program\");\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input a number:\");\r\n                choice = input.nextInt();\r\n                if (choice < 1 || choice > 5) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        switch (choice) {\r\n            case 1:\r\n                yearMenu();\r\n                break;\r\n            case 2:\r\n                gameMenu();\r\n                break;\r\n            case 3:\r\n                generalMenu();\r\n                break;\r\n            case 4:\r\n                specialMenu();\r\n                break;\r\n            case 5:\r\n                System.exit(0);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @author Robert Engel, T03, Feb 21 2022\r\n     * the part of the menu where you enter in a new year\r\n     */\r\n    public static void yearMenu() {\r\n        System.out.println(\"Years are formatted as a 4-digit positive number\");\r\n        int choice = 0;\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input the Year:\");\r\n                choice = input.nextInt();\r\n                if (choice < 1000 || choice > 9999) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        addYear(choice);\r\n        mainMenu();\r\n    }\r\n\r\n    /**\r\n     * @author Robert Engel, T03, Feb 21 2022\r\n     * the part of the menu where you enter in a new game, and all its corresponding data\r\n     */\r\n    public static void gameMenu() {\r\n        int choice = 0;\r\n        String sChoice = \"\";\r\n        String[] gameData = new String[10];\r\n        System.out.println(\"Teams have their first letter capitalized, no periods for abbreviations\");\r\n        while (sChoice.isEmpty() == true) {\r\n            try {\r\n                System.out.print(\"Please Input the Home Team:\");\r\n                sChoice = input.next();\r\n                if (sChoice.isEmpty() == true) {\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        gameData[0] = sChoice;\r\n        sChoice = \"\";\r\n        input.next();\r\n        while (sChoice.isEmpty() == true) {\r\n            try {\r\n                System.out.print(\"Please Input the Away Team:\");\r\n                sChoice = input.next();\r\n                if (sChoice.isEmpty() == true) {\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        gameData[1] = sChoice;\r\n        sChoice = \"\";\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input the Home Team Fouls:\");\r\n                choice = input.nextInt();\r\n                if (choice < 0) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        gameData[2] = Integer.toString(choice);\r\n        choice = 0;\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input the Away Team Fouls:\");\r\n                choice = input.nextInt();\r\n                if (choice < 0) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        gameData[3] = Integer.toString(choice);\r\n        choice = 0;\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input the Home Team Shots:\");\r\n                choice = input.nextInt();\r\n                if (choice < 0) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        gameData[4] = Integer.toString(choice);\r\n        choice = 0;\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input the Away Team Shots:\");\r\n                choice = input.nextInt();\r\n                if (choice < 0) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        gameData[5] = Integer.toString(choice);\r\n        choice = 0;\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input the Home Team Goals:\");\r\n                choice = input.nextInt();\r\n                if (choice < 0) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        gameData[6] = Integer.toString(choice);\r\n        choice = 0;\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input the Away Team Goals:\");\r\n                choice = input.nextInt();\r\n                if (choice < 0) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        gameData[7] = Integer.toString(choice);\r\n        if (Integer.parseInt(gameData[6]) > Integer.parseInt(gameData[7])) {\r\n            gameData[8] = \"Home\";\r\n        } else if (Integer.parseInt(gameData[6]) < Integer.parseInt(gameData[7])) {\r\n            gameData[8] = \"Away\";\r\n        } else if (Integer.parseInt(gameData[6]) == Integer.parseInt(gameData[7])) {\r\n            gameData[8] = \"Tie\";\r\n        }\r\n        choice = 0;\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input the year the game was played:\");\r\n                choice = input.nextInt();\r\n                if (choice < 1000 || choice > 9999) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        int gameYear = choice;\r\n        choice = 0;\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input the month the game was played, as a number (1 = January, 2 = February, etc.:\");\r\n                choice = input.nextInt();\r\n                if (choice < 1 || choice > 12) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        int gameMonth = choice;\r\n        choice = 0;\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input the day the game was played:\");\r\n                choice = input.nextInt();\r\n                if (choice < 1 || choice > 31) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        int gameDay = choice;\r\n        String Date = gameYear + \"-\" + gameMonth + \"-\" + gameDay;\r\n        gameData[9] = Date;\r\n        addGame(gameYear, gameData);\r\n        mainMenu();\r\n    }\r\n\r\n    /**\r\n     * @author Robert Engel, T03, Feb 21 2022\r\n     * the part of the menu where you ask for general types of input\r\n     */\r\n    public static void generalMenu() {\r\n        System.out.println(\"Please Input a Number to choose your action\");\r\n        System.out.println(\"1.Print the total number of shots in a game\\n2.Print the total number of fouls in a game\\n3.Print all years in the database\\n4.Print all the games in a year\\n5.Print all games in the database\\n6.Return to the Main Menu\");\r\n        int choice = 0;\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input a number:\");\r\n                choice = input.nextInt();\r\n                if (choice < 1 || choice > 6) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        switch (choice) {\r\n            case 1:\r\n                //Total number of shots in a game function\r\n                generalMenu();\r\n                break;\r\n            case 2:\r\n                //total number of fouls in a game function\r\n                generalMenu();\r\n                break;\r\n            case 3:\r\n                //print all years function\r\n                generalMenu();\r\n                break;\r\n            case 4:\r\n                //print all games in a year function\r\n                generalMenu();\r\n                break;\r\n            case 5:\r\n                //print all games ever function\r\n                generalMenu();\r\n                break;\r\n            case 6:\r\n                mainMenu();\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @author Robert Engel, T03, Feb 21 2022\r\n     * the part of the menu where you ask for special types of input\r\n     */\r\n    public static void specialMenu() {\r\n        System.out.println(\"Please Input a Number to choose your action\");\r\n        System.out.println(\"1.Print the top 5 games for fouls\\n2.Print the top 5 games for goals\\n3.Print the top 5 teams for wins\\n4. Print the top 5 teams for shots taken\\n5.Return to the Main Menu\");\r\n        int choice = 0;\r\n        while (choice == 0) {\r\n            try {\r\n                System.out.print(\"Please Input a number:\");\r\n                choice = input.nextInt();\r\n                if (choice < 1 || choice > 5) {\r\n                    choice = 0;\r\n                    System.out.println(\"Invalid Input, Please Try again!\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid Input! Please Try Again!\");\r\n                input.next();\r\n            }\r\n        }\r\n        switch (choice) {\r\n            case 1:\r\n                //Top 5 games for fouls function\r\n                specialMenu();\r\n                break;\r\n            case 2:\r\n                //top 5 games for goals function\r\n                specialMenu();\r\n                break;\r\n            case 3:\r\n                //top 5 teams for wins function\r\n                specialMenu();\r\n                break;\r\n            case 4:\r\n                //top 5 teams for shots taken function\r\n                specialMenu();\r\n                break;\r\n            case 5:\r\n                mainMenu();\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function returns the total shots of each team in a particular game\r\n     *\r\n     * @param gameYear    Year of the game that the user wants to see the total shots\r\n     * @param gameChecker Game name that the user want to see the total shots. eg \"Home vs Away on Date\"\r\n     * @return Returns an integer of total shots of each team in a game\r\n     * @author Adrian Ponce, Feb 24, 2022, T03\r\n     */\r\n    public static int totalShots(int gameYear, String gameChecker) {\r\n        String[] homeShots;\r\n        String[] awayShots;\r\n        homeShots = getGameData(gameYear, gameChecker);\r\n        awayShots = getGameData(gameYear, gameChecker);\r\n        assert awayShots != null;\r\n        assert homeShots != null;\r\n        int shotsTotal = Integer.parseInt(homeShots[4] + awayShots[5]);\r\n        return shotsTotal;\r\n    }\r\n\r\n    /**\r\n     * This function returns the total fouls of each team in a particular game\r\n     *\r\n     * @param gameYear    Year of the game that the user wants to see the total fouls\r\n     * @param gameChecker Game name that the user want to see the total fouls\r\n     * @return Returns an integer of the total fouls of each team in game\r\n     * @author Adrian Ponce, Feb 24, 2022, T03\r\n     */\r\n    public static int totalFouls(int gameYear, String gameChecker) {\r\n        String[] homeFouls = getGameData(gameYear, gameChecker);\r\n        String[] awayFouls = getGameData(gameYear, gameChecker);\r\n        assert awayFouls != null;\r\n        assert homeFouls != null;\r\n        int foulsTotal = Integer.parseInt(homeFouls[2] + homeFouls[3]);\r\n        return foulsTotal;\r\n    }\r\n\r\n    /**\r\n     * This function displays every year in the database\r\n     *\r\n     * @return Returns every year in the database in a form of key set\r\n     * @author Adrian Ponce, Feb 24, 2022, T03\r\n     */\r\n    public static Set<String> allYears() {\r\n        return Year.keySet();\r\n    }\r\n\r\n    /**\r\n     * This function displays every game in a year\r\n     *\r\n     * @param gameYear Year that the user is looking for\r\n     * @return Returns every game in a year\r\n     * @author Adrian Ponce, Feb 24, 2022, T03\r\n     */\r\n    public static Set<String> allGameYears(String gameYear) {\r\n        return Year.get(gameYear).keySet();\r\n    }\r\n\r\n    /**\r\n     * This function returns all the games that was in the database\r\n     *\r\n     * @return Returns all the year of the game which contains all the games ever played\r\n     * @author Adrian Ponce, Feb 25, 2022, T03\r\n     */\r\n    public static StringBuilder allGamesEverPlayed() {\r\n        StringBuilder games = new StringBuilder();\r\n        for (Map.Entry<String, HashMap<String, String[]>> entry : Year.entrySet()) {\r\n            games.append(entry.getKey()).append(entry.getValue());\r\n        }\r\n        return games;\r\n    }\r\n\r\n    public static List<String> topTeamFouls() {\r\n        ArrayList<String> fouls = new ArrayList<String>();\r\n        for (Map.Entry<String, HashMap<String, String[]>> outer : Year.entrySet()) {\r\n            for (Map.Entry<String, String[]> inner : outer.getValue().entrySet()) {\r\n                fouls.add(inner.getValue()[2]);\r\n                fouls.add(inner.getValue()[3]);\r\n            }\r\n        }\r\n        Collections.sort(fouls, Collections.reverseOrder());\r\n        List<String> top5fouls = fouls.subList(0,4);\r\n        return top5fouls;\r\n    }\r\n\r\n    public static List<String> topTeamShots() {\r\n        ArrayList<String> shots = new ArrayList<String>();\r\n        for (Map.Entry<String, HashMap<String, String[]>> outer : Year.entrySet()) {\r\n            for (Map.Entry<String, String[]> inner : outer.getValue().entrySet()) {\r\n                shots.add(inner.getValue()[4]);\r\n                shots.add(inner.getValue()[5]);\r\n            }\r\n        }\r\n        Collections.sort(shots, Collections.reverseOrder());\r\n        List<String> top5shots = shots.subList(0,4);\r\n        return top5shots;\r\n    }\r\n\r\n    public static List<String> topTeamGoals() {\r\n        ArrayList<String> goals = new ArrayList<String>();\r\n        for (Map.Entry<String, HashMap<String, String[]>> outer : Year.entrySet()) {\r\n            for (Map.Entry<String, String[]> inner : outer.getValue().entrySet()) {\r\n                goals.add(inner.getValue()[6]);\r\n                goals.add(inner.getValue()[7]);\r\n            }\r\n        }\r\n        Collections.sort(goals, Collections.reverseOrder());\r\n        List<String> top5goals = goals.subList(0,4);\r\n        return top5goals;\r\n    }\r\n\r\n    public static String topTeamWins() {\r\n        ArrayList<String> wins = new ArrayList<String>();\r\n        for (Map.Entry<String, HashMap<String, String[]>> outer : Year.entrySet()) {\r\n            for (Map.Entry<String, String[]> inner : outer.getValue().entrySet()) {\r\n                wins.add(inner.getValue()[8]);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Not much here, just the menu program call\r\n     */\r\n    public static void main(String[] args) {\r\n        mainMenu();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Main.java b/Main.java
--- a/Main.java	(revision 730b553937d441a81c9377619849a53e7942287d)
+++ b/Main.java	(date 1646120736509)
@@ -39,7 +39,7 @@
      */
     public static void addGame(int checkYear, String[] gameData) {
         if (Year.containsKey(Integer.toString(checkYear)) == true) {
-            String gameKey = gameData[1] + " vs. " + gameData[2] + " on " + gameData[9];
+            String gameKey = gameData[0] + " vs. " + gameData[1] + " on " + gameData[9];
             Year.get(Integer.toString(checkYear)).put(gameKey, gameData);
 
         } else {
@@ -65,7 +65,7 @@
         return null;
     }
 
-    public static String findGame() {
+    public static String[] findGame() {
         int choice = 0;
         String sChoice = "";
         System.out.println("Teams have their first letter capitalized, no periods for abbreviations");
@@ -83,6 +83,7 @@
         }
         String homeTeam = sChoice;
         sChoice = "";
+        input.nextLine();
         while (sChoice.isEmpty() == true) {
             try {
                 System.out.print("Please Input the Away Team:");
@@ -92,7 +93,7 @@
                 }
             } catch (InputMismatchException e) {
                 System.out.println("Invalid Input! Please Try Again!");
-                input.next();
+                input.nextLine();
             }
         }
         String awayTeam = sChoice;
@@ -111,9 +112,10 @@
             }
         }
         int gameYear = choice;
+        choice = 0;
         while (choice == 0) {
             try {
-                System.out.print("Please Input the month the game was played, as a number (1 = January, 2 = February, etc.:");
+                System.out.print("Please Input the month the game was played, as a number (1 = January, 2 = February, etc.):");
                 choice = input.nextInt();
                 if (choice < 1 || choice > 12) {
                     choice = 0;
@@ -125,6 +127,7 @@
             }
         }
         int gameMonth = choice;
+        choice = 0;
         while (choice == 0) {
             try {
                 System.out.print("Please Input the day the game was played:");
@@ -141,7 +144,8 @@
         int gameDay = choice;
         String Date = gameYear + "-" + gameMonth + "-" + gameDay;
         String foundGame = homeTeam + " vs. " + awayTeam + " on " + Date;
-        return foundGame;
+        String[] foundGameData = {foundGame, Integer.toString(gameYear)};
+        return foundGameData;
     }
 
     /**
@@ -151,12 +155,12 @@
     public static void mainMenu() {
         int choice = 0;
         System.out.println("Welcome to the Premier League Database Main Menu!\nPlease Input a number to choose your action");
-        System.out.println("1. Add a new Year\n2. Add a new Game to a Year\n3. General Output Menu\n4. Special Output Menu\n5. Quit the program");
+        System.out.println("1. Add a new Year\n2. Add a new Game to a Year\n3. General Output Menu\n4. Special Output Menu\n5. Create Test Data\n6. Quit the program");
         while (choice == 0) {
             try {
                 System.out.print("Please Input a number:");
                 choice = input.nextInt();
-                if (choice < 1 || choice > 5) {
+                if (choice < 1 || choice > 6) {
                     choice = 0;
                     System.out.println("Invalid Input, Please Try again!");
                 }
@@ -179,6 +183,10 @@
                 specialMenu();
                 break;
             case 5:
+                TestData();
+                mainMenu();
+                break;
+            case 6:
                 System.exit(0);
                 break;
         }
@@ -231,7 +239,7 @@
         }
         gameData[0] = sChoice;
         sChoice = "";
-        input.next();
+        input.nextLine();
         while (sChoice.isEmpty() == true) {
             try {
                 System.out.print("Please Input the Away Team:");
@@ -360,7 +368,7 @@
         choice = 0;
         while (choice == 0) {
             try {
-                System.out.print("Please Input the month the game was played, as a number (1 = January, 2 = February, etc.:");
+                System.out.print("Please Input the month the game was played, as a number (1 = January, 2 = February, etc.):");
                 choice = input.nextInt();
                 if (choice < 1 || choice > 12) {
                     choice = 0;
@@ -401,6 +409,7 @@
         System.out.println("Please Input a Number to choose your action");
         System.out.println("1.Print the total number of shots in a game\n2.Print the total number of fouls in a game\n3.Print all years in the database\n4.Print all the games in a year\n5.Print all games in the database\n6.Return to the Main Menu");
         int choice = 0;
+        String[] GameFound;
         while (choice == 0) {
             try {
                 System.out.print("Please Input a number:");
@@ -416,23 +425,42 @@
         }
         switch (choice) {
             case 1:
-                //Total number of shots in a game function
+                GameFound = findGame();
+                System.out.println("The game had " + totalShots(Integer.parseInt(GameFound[1]), GameFound[0]) + " shots");
                 generalMenu();
                 break;
             case 2:
-                //total number of fouls in a game function
+                GameFound = findGame();
+                System.out.println("The game had " + totalFouls(Integer.parseInt(GameFound[1]), GameFound[0]) + " fouls");
                 generalMenu();
                 break;
             case 3:
-                //print all years function
+                System.out.println(allYears());
                 generalMenu();
                 break;
             case 4:
-                //print all games in a year function
+                choice = 0;
+                while (choice == 0) {
+                    try {
+                        System.out.print("Please Input the year you would like to see:");
+                        choice = input.nextInt();
+                        if (choice < 1000 || choice > 9999) {
+                            choice = 0;
+                            System.out.println("Invalid Input, Please Try again!");
+                        }
+                    } catch (InputMismatchException e) {
+                        System.out.println("Invalid Input! Please Try Again!");
+                        input.next();
+                    }
+                }
+                int gameYear = choice;
+                if (Year.containsKey(Integer.toString(choice)) == true) {
+                    System.out.println("All games for " + gameYear + " are " + allGameYears(Integer.toString(gameYear)));
+                }
                 generalMenu();
                 break;
             case 5:
-                //print all games ever function
+                System.out.println(allGamesEverPlayed());
                 generalMenu();
                 break;
             case 6:
@@ -447,7 +475,7 @@
      */
     public static void specialMenu() {
         System.out.println("Please Input a Number to choose your action");
-        System.out.println("1.Print the top 5 games for fouls\n2.Print the top 5 games for goals\n3.Print the top 5 teams for wins\n4. Print the top 5 teams for shots taken\n5.Return to the Main Menu");
+        System.out.println("1.Print the top 5 games for fouls\n2.Print the top 5 games for shots\n3.Print the top 5 games for goals\n4.Print how many games ended in a tie\n5.Return to the Main Menu");
         int choice = 0;
         while (choice == 0) {
             try {
@@ -464,19 +492,19 @@
         }
         switch (choice) {
             case 1:
-                //Top 5 games for fouls function
+                System.out.println("The top 5 amount of fouls in a game are " + topTeamFouls());
                 specialMenu();
                 break;
             case 2:
-                //top 5 games for goals function
+                System.out.println("The top 5 amount of shots in a game are " + topTeamShots());
                 specialMenu();
                 break;
             case 3:
-                //top 5 teams for wins function
+                System.out.println("The top 5 amount of goals in a game are " + topTeamGoals());
                 specialMenu();
                 break;
             case 4:
-                //top 5 teams for shots taken function
+                System.out.println(gamesWithATie() + " Games ended in a tie");
                 specialMenu();
                 break;
             case 5:
@@ -485,6 +513,37 @@
         }
     }
 
+    /**
+     * Creates a bunch of test data within the program, for demo purposes
+     *
+     * @author Robert Engel, T03, Feb 28 2022
+     */
+    public static void TestData() {
+        // Adding games to the database to use as testing data's
+        addYear(2020);
+        addYear(2021);
+        addYear(2022);
+        String[] game1 = {"Manchester", "Glasborough", "22", "33", "11", "18", "5", "7", "Home", "2020-1-1"};
+        String[] game2 = {"Manchester", "Glasborough", "23", "34", "12", "19", "7", "5", "Away", "2020-1-2"};
+        String[] game3 = {"Manchester", "Glasborough", "24", "35", "13", "20", "5", "5", "Tie", "2020-1-3"};
+        String[] game4 = {"Manchester", "Glasborough", "25", "36", "14", "21", "8", "6", "Home", "2021-1-1"};
+        String[] game5 = {"Manchester", "Glasborough", "26", "37", "15", "22", "9", "7", "Away", "2021-1-2"};
+        String[] game6 = {"Manchester", "Glasborough", "27", "38", "16", "23", "9", "8", "Tie", "2021-1-3"};
+        String[] game7 = {"Manchester", "Glasborough", "28", "39", "17", "24", "5", "7", "Home", "2022-1-1"};
+        String[] game8 = {"Manchester", "Glasborough", "29", "40", "18", "25", "7", "5", "Away", "2022-1-2"};
+        String[] game9 = {"Manchester", "Glasborough", "21", "41", "19", "26", "5", "5", "Tie", "2022-1-3"};
+        addGame(2020, game1);
+        addGame(2020, game2);
+        addGame(2020, game3);
+        addGame(2021, game4);
+        addGame(2021, game5);
+        addGame(2021, game6);
+        addGame(2022, game7);
+        addGame(2022, game8);
+        addGame(2022, game9);
+        System.out.println("Test Data Activated!");
+    }
+
     /**
      * This function returns the total shots of each team in a particular game
      *
@@ -496,12 +555,18 @@
     public static int totalShots(int gameYear, String gameChecker) {
         String[] homeShots;
         String[] awayShots;
+        // Using the getGameData function to get the shots data
         homeShots = getGameData(gameYear, gameChecker);
         awayShots = getGameData(gameYear, gameChecker);
-        assert awayShots != null;
-        assert homeShots != null;
-        int shotsTotal = Integer.parseInt(homeShots[4] + awayShots[5]);
-        return shotsTotal;
+        // Using conditional to make sure home and away shots are not equals to null
+        if (homeShots != null && awayShots != null) {
+            // Assigning the index of shots and adding it to a variable, then returning it
+            int shotsTotal = Integer.parseInt(homeShots[4]) + Integer.parseInt(awayShots[5]);
+            return shotsTotal;
+        } else {
+            System.out.println("Error Occurred! Game Not Found!");
+            return 0;
+        }
     }
 
     /**
@@ -513,12 +578,18 @@
      * @author Adrian Ponce, Feb 24, 2022, T03
      */
     public static int totalFouls(int gameYear, String gameChecker) {
+        // Using the getGameData function to get the foul data
         String[] homeFouls = getGameData(gameYear, gameChecker);
         String[] awayFouls = getGameData(gameYear, gameChecker);
-        assert awayFouls != null;
-        assert homeFouls != null;
-        int foulsTotal = Integer.parseInt(homeFouls[2] + homeFouls[3]);
-        return foulsTotal;
+        // Using conditional to make sure home and away fouls are not equals to null
+        if (homeFouls != null && awayFouls != null) {
+            // Assigning the index of fouls and adding it to a variable, then returning it
+            int foulsTotal = Integer.parseInt(homeFouls[2]) + Integer.parseInt(homeFouls[3]);
+            return foulsTotal;
+        } else {
+            System.out.println("Error Occurred! Game Not Found!");
+            return 0;
+        }
     }
 
     /**
@@ -528,6 +599,7 @@
      * @author Adrian Ponce, Feb 24, 2022, T03
      */
     public static Set<String> allYears() {
+        // Returns all the year in the database
         return Year.keySet();
     }
 
@@ -539,6 +611,7 @@
      * @author Adrian Ponce, Feb 24, 2022, T03
      */
     public static Set<String> allGameYears(String gameYear) {
+        // Returns every game in a year
         return Year.get(gameYear).keySet();
     }
 
@@ -548,61 +621,113 @@
      * @return Returns all the year of the game which contains all the games ever played
      * @author Adrian Ponce, Feb 25, 2022, T03
      */
-    public static StringBuilder allGamesEverPlayed() {
-        StringBuilder games = new StringBuilder();
+    public static List<String> allGamesEverPlayed() {
+        ArrayList<String> games = new ArrayList<String>();
+        // Looping through the hashmap to return every game ever played and adding it to an arraylist and returning it
         for (Map.Entry<String, HashMap<String, String[]>> entry : Year.entrySet()) {
-            games.append(entry.getKey()).append(entry.getValue());
+            games.add(String.valueOf(entry.getValue().keySet()));
         }
         return games;
     }
 
+    /**
+     * This function loops through all the games and returns the top 5 games that has most team fouls
+     *
+     * @return Returns the top 5 fouls in a list of string
+     * @author Adrian Ponce, Feb 24, 2022, T03
+     */
     public static List<String> topTeamFouls() {
         ArrayList<String> fouls = new ArrayList<String>();
+        // Looping through the outer hashmap
         for (Map.Entry<String, HashMap<String, String[]>> outer : Year.entrySet()) {
+            // Looping through the inner hashmap to access its value
             for (Map.Entry<String, String[]> inner : outer.getValue().entrySet()) {
+                // Adding the value of fouls from the inner Hashmap to an arraylist
                 fouls.add(inner.getValue()[2]);
                 fouls.add(inner.getValue()[3]);
             }
         }
+        // Sorting the values
         Collections.sort(fouls, Collections.reverseOrder());
-        List<String> top5fouls = fouls.subList(0,4);
+        // Slicing the top 5 value of fouls from a descending order and returning it
+        List<String> top5fouls = fouls.subList(0, 5);
         return top5fouls;
     }
 
+    /**
+     * This function loops through all the games and returns the top 5 games that has most team shots
+     *
+     * @return Returns the top 5 team shots in a list of string
+     * @author Adrian Ponce, Feb 24, 2022, T03
+     */
     public static List<String> topTeamShots() {
         ArrayList<String> shots = new ArrayList<String>();
+        // Looping through the outer hashmap
         for (Map.Entry<String, HashMap<String, String[]>> outer : Year.entrySet()) {
+            // Looping through the inner hashmap to access its value
             for (Map.Entry<String, String[]> inner : outer.getValue().entrySet()) {
+                // Adding the value of shots from the inner Hashmap to an arraylist
                 shots.add(inner.getValue()[4]);
                 shots.add(inner.getValue()[5]);
             }
         }
+        // Sorting the values
         Collections.sort(shots, Collections.reverseOrder());
-        List<String> top5shots = shots.subList(0,4);
+        // Slicing the top 5 value of shots from a descending order and returning it
+        List<String> top5shots = shots.subList(0, 5);
         return top5shots;
     }
 
+    /**
+     * This function loops through all the games and returns the top 5 games that has most team goals
+     *
+     * @return Returns the top 5 team goals in a list of string
+     * @author Adrian Ponce, Feb 24, 2022, T03
+     */
     public static List<String> topTeamGoals() {
         ArrayList<String> goals = new ArrayList<String>();
+        // Looping through the outer hashmap
         for (Map.Entry<String, HashMap<String, String[]>> outer : Year.entrySet()) {
+            // Looping through the inner hashmap to access the goals value
             for (Map.Entry<String, String[]> inner : outer.getValue().entrySet()) {
+                // Adding the value of goals from the inner Hashmap to an arraylist
                 goals.add(inner.getValue()[6]);
                 goals.add(inner.getValue()[7]);
             }
         }
+        // Sorting the goals values
         Collections.sort(goals, Collections.reverseOrder());
-        List<String> top5goals = goals.subList(0,4);
+        // Slicing the top 5 value of goals from a descending order and returning it
+        List<String> top5goals = goals.subList(0, 5);
         return top5goals;
     }
 
-    public static String topTeamWins() {
-        ArrayList<String> wins = new ArrayList<String>();
+    /**
+     * This function returns the tally of the games that ended up as a tie game
+     *
+     * @return Returns the tally of the games that is a tie game
+     * @author Adrian Ponce, Feb 24, 2022, T03
+     */
+    public static int gamesWithATie() {
+        ArrayList<String> games = new ArrayList<String>();
+        // Declaring an integer variable to keep track of the tie game
+        int tieGame = 0;
+        // Looping through the outer Hashmap
         for (Map.Entry<String, HashMap<String, String[]>> outer : Year.entrySet()) {
+            // Looping through the inner Hashmap to access the winner value
             for (Map.Entry<String, String[]> inner : outer.getValue().entrySet()) {
-                wins.add(inner.getValue()[8]);
+                // Adding it to an arraylist
+                games.add(inner.getValue()[8]);
             }
         }
-
+        // Looping through the arraylist of winners data
+        for (int i = 0; i < games.size(); i++) {
+            // Conditional to check if there's a tie game and adding 1 to tally if there is and returning it
+            if (Objects.equals(games.get(i), "Tie")) {
+                tieGame++;
+            }
+        }
+        return tieGame;
     }
 
     /**
@@ -611,4 +736,4 @@
     public static void main(String[] args) {
         mainMenu();
     }
-}
+}
\ No newline at end of file
Index: .idea/project-robert-engel-and-adrian-ponce.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/project-robert-engel-and-adrian-ponce.iml b/.idea/project-robert-engel-and-adrian-ponce.iml
--- a/.idea/project-robert-engel-and-adrian-ponce.iml	(revision 730b553937d441a81c9377619849a53e7942287d)
+++ b/.idea/project-robert-engel-and-adrian-ponce.iml	(date 1646032201091)
@@ -7,5 +7,21 @@
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module-library">
+      <library name="JUnit5.7.0">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.7.0/junit-jupiter-5.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.7.0/junit-jupiter-api-5.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.7.0/junit-platform-commons-1.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.7.0/junit-jupiter-params-5.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.7.0/junit-jupiter-engine-5.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.7.0/junit-platform-engine-1.7.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
   </component>
 </module>
\ No newline at end of file
Index: out/production/project-robert-engel-and-adrian-ponce/.idea/project-robert-engel-and-adrian-ponce.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/project-robert-engel-and-adrian-ponce/.idea/project-robert-engel-and-adrian-ponce.iml b/out/production/project-robert-engel-and-adrian-ponce/.idea/project-robert-engel-and-adrian-ponce.iml
--- a/out/production/project-robert-engel-and-adrian-ponce/.idea/project-robert-engel-and-adrian-ponce.iml	(revision 730b553937d441a81c9377619849a53e7942287d)
+++ b/out/production/project-robert-engel-and-adrian-ponce/.idea/project-robert-engel-and-adrian-ponce.iml	(date 1646032201091)
@@ -7,5 +7,21 @@
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module-library">
+      <library name="JUnit5.7.0">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.7.0/junit-jupiter-5.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.7.0/junit-jupiter-api-5.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.7.0/junit-platform-commons-1.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.7.0/junit-jupiter-params-5.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.7.0/junit-jupiter-engine-5.7.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.7.0/junit-platform-engine-1.7.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
   </component>
 </module>
\ No newline at end of file
Index: MainTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MainTest.java b/MainTest.java
new file mode 100644
--- /dev/null	(date 1646103908460)
+++ b/MainTest.java	(date 1646103908460)
@@ -0,0 +1,149 @@
+import org.junit.jupiter.api.Test;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class MainTest {
+
+    /**
+     * @author Adrian Ponce, Feb 28, 2022, T03
+     * Test to find the total fouls in a game on 2022-1-3
+     */
+    @Test
+    void totalFoulsTest() {
+        Main.TestData();
+        assertEquals(62, Main.totalFouls(2022, "Manchester vs. Glasborough on 2022-1-3"));
+    }
+
+    /**
+     * @author Adrian Ponce, Feb 28, 2022, T03
+     * Test to find the total fouls in a game on 2020-1-2
+     */
+    @Test
+    void totalFoulsTestOnADifferentGame() {
+        Main.TestData();
+        assertEquals(57, Main.totalFouls(2020, "Manchester vs. Glasborough on 2020-1-2"));
+    }
+
+    /**
+     * @author Adrian Ponce, Feb 28, 2022, T03
+     * Test to find the total shots in a game on 2021-1-3
+     */
+    @Test
+    void totalShotsTest() {
+        Main.TestData();
+        assertEquals(39, Main.totalShots(2021, "Manchester vs. Glasborough on 2021-1-3"));
+    }
+
+    /**
+     * @author Adrian Ponce, Feb 28, 2022, T03
+     * Test to find the total shots in a game on 2020-1-1
+     */
+    @Test
+    void totalShotsTestOnDifferentGame() {
+        Main.TestData();
+        assertEquals(29, Main.totalShots(2020, "Manchester vs. Glasborough on 2020-1-1"));
+    }
+
+    /**
+     * @author Adrian Ponce, Feb 28, 2022, T03
+     * Test to find the total shots in a game on 2020-1-1
+     */
+    @Test
+    void topTeamGoalsTest() {
+        Main.TestData();
+        List<String> expectedList = new ArrayList<>();
+        expectedList.add("9");
+        expectedList.add("9");
+        expectedList.add("8");
+        expectedList.add("8");
+        expectedList.add("7");
+        assertArrayEquals(expectedList.toArray(), Main.topTeamGoals().toArray());
+    }
+
+    /**
+     * @author Adrian Ponce, Feb 28, 2022, T03
+     * Test to find the top 5 team fouls commited
+     */
+    @Test
+    void topTeamFoulsTest() {
+        Main.TestData();
+        List<String> expectedList = new ArrayList<>();
+        expectedList.add("41");
+        expectedList.add("40");
+        expectedList.add("39");
+        expectedList.add("38");
+        expectedList.add("37");
+        assertArrayEquals(expectedList.toArray(), Main.topTeamFouls().toArray());
+    }
+
+    /**
+     * @author Adrian Ponce, Feb 28, 2022, T03
+     * Test to find the top 5 team shots
+     */
+    @Test
+    void topTeamShotsTest() {
+        Main.TestData();
+        List<String> expectedList = new ArrayList<>();
+        expectedList.add("26");
+        expectedList.add("25");
+        expectedList.add("24");
+        expectedList.add("23");
+        expectedList.add("22");
+        assertArrayEquals(expectedList.toArray(), Main.topTeamShots().toArray());
+    }
+
+    /**
+     * @author Adrian Ponce, Feb 28, 2022, T03
+     * Test to find the tally of the games ended in a tie
+     */
+    @Test
+    void gamesWithATie() {
+        Main.TestData();
+        int x = 3;
+        assertEquals(3, Main.gamesWithATie());
+    }
+
+    /**
+     * Test if a year is added correctly
+     * @author Robert Engel, T03, Feb 28, 2022
+     * */
+    @Test
+    void addYearTest() {
+        Main.addYear(2020);
+        assertEquals(true, Main.Year.containsKey("2020"));
+    }
+    /**
+     * Test if a game is added correctly
+     * @author Robert Engel, T03, Feb 28, 2022
+     * */
+    @Test
+    void addGameTest() {
+        Main.TestData();
+        String[] game1 = {"Manchester", "Glasborough", "22", "33", "11", "18", "5", "7", "Home", "2020-1-1"};
+        assertArrayEquals(game1, Main.Year.get("2020").get("Manchester vs. Glasborough on 2020-1-1"));
+    }
+    /**
+     * Test if a game is retrieved correctly
+     * @author Robert Engel, T03, Feb 28, 2022
+     * */
+    @Test
+    void getGameDataTest() {
+        Main.TestData();
+        assertArrayEquals(Main.Year.get("2020").get("Manchester vs. Glasborough on 2020-1-1"), Main.getGameData(2020, "Manchester vs. Glasborough on 2020-1-1"));
+    }
+    /**
+     * Test if the test data is added correctly
+     * @author Robert Engel, T03, Feb 28, 2022
+     * */
+    @Test
+    void TestDataTest() {
+        Main.TestData();
+        String[] game1 = {"Manchester", "Glasborough", "22", "33", "11", "18", "5", "7", "Home", "2020-1-1"};
+        assertArrayEquals(game1, Main.Year.get("2020").get("Manchester vs. Glasborough on 2020-1-1"));
+    }
+}
\ No newline at end of file
